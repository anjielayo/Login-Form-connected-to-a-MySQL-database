#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 17, 2021 10:58:46 AM WAT  platform: Windows NT
import re  # regular expression
import random
from tkinter import messagebox
import mysql.connector
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import ecommerce_support
import os.path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Toplevel1(root)
    ecommerce_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    ecommerce_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        self.conn = mysql.connector.connect(
            host="localhost", user="root", password="", database="commercedb")
        self.cursor = self.conn.cursor()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("600x450+370+32")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(0, 0)  # changed the values so it won't be resizable
        top.title("Ecommerce Shop")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # ----------------------BEGIN USER FRAME-------------------------------#
        self.user = tk.Frame(top)
        self.user.place(relx=0.013, rely=0.018,
                        relheight=0.967, relwidth=0.975)
        self.user.configure(relief='groove')
        self.user.configure(borderwidth="2")
        self.user.configure(relief="groove")
        self.user.configure(background="#d9d9d9")
        self.user.configure(highlightbackground="#d9d9d9")
        self.user.configure(highlightcolor="black")

        self.logout_button_user = tk.Button(
            self.user, command=lambda: self.show_frame(self.home))
        self.logout_button_user.place(
            relx=0.838, rely=0.046, height=24, width=77)
        self.logout_button_user.configure(activebackground="#ececec")
        self.logout_button_user.configure(activeforeground="#000000")
        self.logout_button_user.configure(background="#ff0000")
        self.logout_button_user.configure(cursor="arrow")
        self.logout_button_user.configure(disabledforeground="#a3a3a3")
        self.logout_button_user.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.logout_button_user.configure(foreground="#ffffff")
        self.logout_button_user.configure(highlightbackground="#d9d9d9")
        self.logout_button_user.configure(highlightcolor="black")
        self.logout_button_user.configure(pady="0")
        self.logout_button_user.configure(relief="groove")
        self.logout_button_user.configure(text='''Logout''')
        # ----------------------END USER FRAME-------------------------------#

        # ----------------------BEGIN LOGIN FRAME-------------------------------#
        self.login = tk.Frame(top)
        self.login.place(relx=0.013, rely=0.018,
                         relheight=0.967, relwidth=0.975)

        self.login.configure(relief='groove')
        self.login.configure(borderwidth="2")
        self.login.configure(relief="groove")
        self.login.configure(background="#d9d9d9")
        self.login.configure(highlightbackground="#d9d9d9")
        self.login.configure(highlightcolor="black")

        self.home_btn_login = tk.Button(
            self.login, command=lambda: self.show_frame(self.home))
        self.home_btn_login.place(relx=0.667, rely=0.046, height=24, width=77)
        self.home_btn_login.configure(activebackground="#ececec")
        self.home_btn_login.configure(activeforeground="#000000")
        self.home_btn_login.configure(background="#2464db")
        self.home_btn_login.configure(cursor="arrow")
        self.home_btn_login.configure(disabledforeground="#a3a3a3")
        self.home_btn_login.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.home_btn_login.configure(foreground="#ffffff")
        self.home_btn_login.configure(highlightbackground="#d9d9d9")
        self.home_btn_login.configure(highlightcolor="black")
        self.home_btn_login.configure(pady="0")
        self.home_btn_login.configure(relief="groove")
        self.home_btn_login.configure(text='''Home''')

        self.signup_btn_login = tk.Button(
            self.login, command=lambda: self.show_frame(self.register))
        self.signup_btn_login.place(
            relx=0.838, rely=0.046, height=24, width=77)
        self.signup_btn_login.configure(activebackground="#ececec")
        self.signup_btn_login.configure(activeforeground="#000000")
        self.signup_btn_login.configure(background="#2464db")
        self.signup_btn_login.configure(disabledforeground="#a3a3a3")
        self.signup_btn_login.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_login.configure(foreground="#ffffff")
        self.signup_btn_login.configure(highlightbackground="#d9d9d9")
        self.signup_btn_login.configure(highlightcolor="black")
        self.signup_btn_login.configure(pady="0")
        self.signup_btn_login.configure(relief="groove")
        self.signup_btn_login.configure(text='''Sign Up''')

        self.login_Labelframe1_login = tk.LabelFrame(self.login)
        self.login_Labelframe1_login.place(
            relx=0.051, rely=0.184, relheight=0.609, relwidth=0.906)
        self.login_Labelframe1_login.configure(relief='groove')
        self.login_Labelframe1_login.configure(foreground="black")
        self.login_Labelframe1_login.configure(text='''Login''')
        self.login_Labelframe1_login.configure(background="#d9d9d9")
        self.login_Labelframe1_login.configure(highlightbackground="#d9d9d9")
        self.login_Labelframe1_login.configure(highlightcolor="black")

        self.username_Label_login = tk.Label(self.login_Labelframe1_login)
        self.username_Label_login.place(
            relx=0.189, rely=0.238, height=19, width=80, bordermode='ignore')
        self.username_Label_login.configure(activebackground="#f9f9f9")
        self.username_Label_login.configure(activeforeground="black")
        self.username_Label_login.configure(background="#d9d9d9")
        self.username_Label_login.configure(disabledforeground="#a3a3a3")
        self.username_Label_login.configure(foreground="#000000")
        self.username_Label_login.configure(highlightbackground="#d9d9d9")
        self.username_Label_login.configure(highlightcolor="black")
        self.username_Label_login.configure(text='''Username''')

        self.username_Entry_login = tk.Entry(self.login_Labelframe1_login)
        self.username_Entry_login.place(
            relx=0.415, rely=0.238, height=20, relwidth=0.321, bordermode='ignore')
        self.username_Entry_login.configure(background="white")
        self.username_Entry_login.configure(disabledforeground="#a3a3a3")
        self.username_Entry_login.configure(font="TkFixedFont")
        self.username_Entry_login.configure(foreground="#000000")
        self.username_Entry_login.configure(highlightbackground="#d9d9d9")
        self.username_Entry_login.configure(highlightcolor="black")
        self.username_Entry_login.configure(insertbackground="black")
        self.username_Entry_login.configure(selectbackground="blue")
        self.username_Entry_login.configure(selectforeground="white")

        self.pass_Label_login = tk.Label(self.login_Labelframe1_login)
        self.pass_Label_login.place(
            relx=0.189, rely=0.442, height=19, width=80, bordermode='ignore')
        self.pass_Label_login.configure(activebackground="#f9f9f9")
        self.pass_Label_login.configure(activeforeground="black")
        self.pass_Label_login.configure(background="#d9d9d9")
        self.pass_Label_login.configure(disabledforeground="#a3a3a3")
        self.pass_Label_login.configure(foreground="#000000")
        self.pass_Label_login.configure(highlightbackground="#d9d9d9")
        self.pass_Label_login.configure(highlightcolor="black")
        self.pass_Label_login.configure(text='''Password''')

        self.pass_Entry_login_1 = tk.Entry(
            self.login_Labelframe1_login, show="*")
        self.pass_Entry_login_1.place(
            relx=0.415, rely=0.442, height=20, relwidth=0.321, bordermode='ignore')
        self.pass_Entry_login_1.configure(background="white")
        self.pass_Entry_login_1.configure(disabledforeground="#a3a3a3")
        self.pass_Entry_login_1.configure(font="TkFixedFont")
        self.pass_Entry_login_1.configure(foreground="#000000")
        self.pass_Entry_login_1.configure(highlightbackground="#d9d9d9")
        self.pass_Entry_login_1.configure(highlightcolor="black")
        self.pass_Entry_login_1.configure(insertbackground="black")
        self.pass_Entry_login_1.configure(selectbackground="blue")
        self.pass_Entry_login_1.configure(selectforeground="white")

        self.Button5_1 = tk.Button(
            self.login_Labelframe1_login, command=self.authenticate)
        self.Button5_1.place(relx=0.415, rely=0.645,
                             height=24, width=170, bordermode='ignore')
        self.Button5_1.configure(activebackground="#ececec")
        self.Button5_1.configure(activeforeground="#000000")
        self.Button5_1.configure(background="#2464db")
        self.Button5_1.configure(cursor="arrow")
        self.Button5_1.configure(disabledforeground="#a3a3a3")
        self.Button5_1.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Button5_1.configure(foreground="#ffffff")
        self.Button5_1.configure(highlightbackground="#d9d9d9")
        self.Button5_1.configure(highlightcolor="black")
        self.Button5_1.configure(pady="0")
        self.Button5_1.configure(relief="groove")
        self.Button5_1.configure(text='''Login''')
        # ----------------------END LOGIN FRAME-------------------------------#

        # ----------------------BEGIN REGISTER FRAME-------------------------------#
        self.register = tk.Frame(top)
        self.register.place(relx=0.013, rely=0.018,
                            relheight=0.967, relwidth=0.975)
        self.register.configure(relief='groove')
        self.register.configure(borderwidth="2")
        self.register.configure(relief="groove")
        self.register.configure(background="#d9d9d9")
        self.register.configure(highlightbackground="#d9d9d9")
        self.register.configure(highlightcolor="black")

        self.home_btn_reg = tk.Button(
            self.register, command=lambda: self.show_frame(self.home))
        self.home_btn_reg.place(relx=0.65, rely=0.046, height=23, width=77)
        self.home_btn_reg.configure(activebackground="#ececec")
        self.home_btn_reg.configure(activeforeground="#000000")
        self.home_btn_reg.configure(background="#2464db")
        self.home_btn_reg.configure(cursor="arrow")
        self.home_btn_reg.configure(disabledforeground="#a3a3a3")
        self.home_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.home_btn_reg.configure(foreground="#ffffff")
        self.home_btn_reg.configure(highlightbackground="#d9d9d9")
        self.home_btn_reg.configure(highlightcolor="black")
        self.home_btn_reg.configure(pady="0")
        self.home_btn_reg.configure(relief="groove")
        self.home_btn_reg.configure(text='''Home''')

        self.login_btn_reg = tk.Button(
            self.register, command=lambda: self.show_frame(self.login))
        self.login_btn_reg.place(relx=0.821, rely=0.046, height=24, width=77)
        self.login_btn_reg.configure(activebackground="#ececec")
        self.login_btn_reg.configure(activeforeground="#000000")
        self.login_btn_reg.configure(background="#2464db")
        self.login_btn_reg.configure(cursor="arrow")
        self.login_btn_reg.configure(disabledforeground="#a3a3a3")
        self.login_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.login_btn_reg.configure(foreground="#ffffff")
        self.login_btn_reg.configure(highlightbackground="#d9d9d9")
        self.login_btn_reg.configure(highlightcolor="black")
        self.login_btn_reg.configure(pady="0")
        self.login_btn_reg.configure(relief="groove")
        self.login_btn_reg.configure(text='''Sign In''')

        self.userreg_Labelframe_reg = tk.LabelFrame(self.register)
        self.userreg_Labelframe_reg.place(
            relx=0.068, rely=0.161, relheight=0.77, relwidth=0.872)
        self.userreg_Labelframe_reg.configure(relief='groove')
        self.userreg_Labelframe_reg.configure(foreground="black")
        self.userreg_Labelframe_reg.configure(text='''User Registration''')
        self.userreg_Labelframe_reg.configure(background="#d9d9d9")
        self.userreg_Labelframe_reg.configure(highlightbackground="#d9d9d9")
        self.userreg_Labelframe_reg.configure(highlightcolor="black")

        self.username_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.username_label_reg.place(
            relx=0.137, rely=0.209, height=21, width=96, bordermode='ignore')
        self.username_label_reg.configure(activebackground="#f9f9f9")
        self.username_label_reg.configure(activeforeground="black")
        self.username_label_reg.configure(background="#d9d9d9")
        self.username_label_reg.configure(disabledforeground="#a3a3a3")
        self.username_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.username_label_reg.configure(foreground="#000000")
        self.username_label_reg.configure(highlightbackground="#d9d9d9")
        self.username_label_reg.configure(highlightcolor="black")
        self.username_label_reg.configure(text='''Username''')

        self.username_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg)
        self.username_Entry1_reg.place(
            relx=0.412, rely=0.209, height=20, relwidth=0.431, bordermode='ignore')
        self.username_Entry1_reg.configure(background="white")
        self.username_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.username_Entry1_reg.configure(font="TkFixedFont")
        self.username_Entry1_reg.configure(foreground="#000000")
        self.username_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.username_Entry1_reg.configure(highlightcolor="black")
        self.username_Entry1_reg.configure(insertbackground="black")
        self.username_Entry1_reg.configure(selectbackground="blue")
        self.username_Entry1_reg.configure(selectforeground="white")

        self.email_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.email_label_reg.place(
            relx=0.137, rely=0.358, height=21, width=97, bordermode='ignore')
        self.email_label_reg.configure(activebackground="#f9f9f9")
        self.email_label_reg.configure(activeforeground="black")
        self.email_label_reg.configure(background="#d9d9d9")
        self.email_label_reg.configure(disabledforeground="#a3a3a3")
        self.email_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.email_label_reg.configure(foreground="#000000")
        self.email_label_reg.configure(highlightbackground="#d9d9d9")
        self.email_label_reg.configure(highlightcolor="black")
        self.email_label_reg.configure(text='''Email''')

        self.email_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg)
        self.email_Entry1_reg.place(
            relx=0.412, rely=0.358, height=20, relwidth=0.431, bordermode='ignore')
        self.email_Entry1_reg.configure(background="white")
        self.email_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.email_Entry1_reg.configure(font="TkFixedFont")
        self.email_Entry1_reg.configure(foreground="#000000")
        self.email_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.email_Entry1_reg.configure(highlightcolor="black")
        self.email_Entry1_reg.configure(insertbackground="black")
        self.email_Entry1_reg.configure(selectbackground="blue")
        self.email_Entry1_reg.configure(selectforeground="white")

        self.pass_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.pass_label_reg.place(
            relx=0.137, rely=0.507, height=21, width=97, bordermode='ignore')
        self.pass_label_reg.configure(activebackground="#f9f9f9")
        self.pass_label_reg.configure(activeforeground="black")
        self.pass_label_reg.configure(background="#d9d9d9")
        self.pass_label_reg.configure(disabledforeground="#a3a3a3")
        self.pass_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.pass_label_reg.configure(foreground="#000000")
        self.pass_label_reg.configure(highlightbackground="#d9d9d9")
        self.pass_label_reg.configure(highlightcolor="black")
        self.pass_label_reg.configure(text='''Password''')

        self.pass_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg, show="*")
        self.pass_Entry1_reg.place(
            relx=0.412, rely=0.507, height=20, relwidth=0.431, bordermode='ignore')
        self.pass_Entry1_reg.configure(background="white")
        self.pass_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.pass_Entry1_reg.configure(font="TkFixedFont")
        self.pass_Entry1_reg.configure(foreground="#000000")
        self.pass_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.pass_Entry1_reg.configure(highlightcolor="black")
        self.pass_Entry1_reg.configure(insertbackground="black")
        self.pass_Entry1_reg.configure(selectbackground="blue")
        self.pass_Entry1_reg.configure(selectforeground="white")

        self.confirm_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.confirm_label_reg.place(
            relx=0.137, rely=0.657, height=21, width=97, bordermode='ignore')
        self.confirm_label_reg.configure(activebackground="#f9f9f9")
        self.confirm_label_reg.configure(activeforeground="black")
        self.confirm_label_reg.configure(background="#d9d9d9")
        self.confirm_label_reg.configure(disabledforeground="#a3a3a3")
        self.confirm_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.confirm_label_reg.configure(foreground="#000000")
        self.confirm_label_reg.configure(highlightbackground="#d9d9d9")
        self.confirm_label_reg.configure(highlightcolor="black")
        self.confirm_label_reg.configure(text='''Confirm Password''')

        self.confirm_Entry1_reg = tk.Entry(
            self.userreg_Labelframe_reg, show="*")
        self.confirm_Entry1_reg.place(
            relx=0.412, rely=0.657, height=20, relwidth=0.431, bordermode='ignore')
        self.confirm_Entry1_reg.configure(background="white")
        self.confirm_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.confirm_Entry1_reg.configure(font="TkFixedFont")
        self.confirm_Entry1_reg.configure(foreground="#000000")
        self.confirm_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.confirm_Entry1_reg.configure(highlightcolor="black")
        self.confirm_Entry1_reg.configure(insertbackground="black")
        self.confirm_Entry1_reg.configure(selectbackground="blue")
        self.confirm_Entry1_reg.configure(selectforeground="white")

        self.signup_btn_reg = tk.Button(
            self.userreg_Labelframe_reg, command=self.validate)
        self.signup_btn_reg.place(
            relx=0.412, rely=0.806, height=23, width=220, bordermode='ignore')
        self.signup_btn_reg.configure(activebackground="#ececec")
        self.signup_btn_reg.configure(activeforeground="#000000")
        self.signup_btn_reg.configure(background="#2464db")
        self.signup_btn_reg.configure(cursor="arrow")
        self.signup_btn_reg.configure(disabledforeground="#a3a3a3")
        self.signup_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_reg.configure(foreground="#ffffff")
        self.signup_btn_reg.configure(highlightbackground="#d9d9d9")
        self.signup_btn_reg.configure(highlightcolor="black")
        self.signup_btn_reg.configure(pady="0")
        self.signup_btn_reg.configure(relief="groove")
        self.signup_btn_reg.configure(text='''Sign Up''')
        # ----------------------END REGISTER FRAME-------------------------------#

        # ----------------------BEGIN HOME FRAME-------------------------------#
        self.home = tk.Frame(top)
        self.home.place(relx=0.013, rely=0.018,
                        relheight=0.967, relwidth=0.975)
        self.home.configure(relief='groove')
        self.home.configure(borderwidth="2")
        self.home.configure(relief="groove")
        self.home.configure(background="#d9d9d9")
        self.home.configure(highlightbackground="#d9d9d9")
        self.home.configure(highlightcolor="black")

        self.signin_btn_home = tk.Button(
            self.home, command=lambda: self.show_frame(self.login))
        self.signin_btn_home.place(relx=0.667, rely=0.023, height=24, width=77)
        self.signin_btn_home.configure(activebackground="#ececec")
        self.signin_btn_home.configure(activeforeground="#000000")
        self.signin_btn_home.configure(background="#2464db")
        self.signin_btn_home.configure(cursor="arrow")
        self.signin_btn_home.configure(disabledforeground="#a3a3a3")
        self.signin_btn_home.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signin_btn_home.configure(foreground="#ffffff")
        self.signin_btn_home.configure(highlightbackground="#d9d9d9")
        self.signin_btn_home.configure(highlightcolor="black")
        self.signin_btn_home.configure(pady="0")
        self.signin_btn_home.configure(relief="groove")
        self.signin_btn_home.configure(text='''Sign In''')

        self.signup_btn_home = tk.Button(
            self.home, command=lambda: self.show_frame(self.register))
        self.signup_btn_home.place(relx=0.838, rely=0.023, height=24, width=77)
        self.signup_btn_home.configure(activebackground="#ececec")
        self.signup_btn_home.configure(activeforeground="#000000")
        self.signup_btn_home.configure(background="#2464db")
        self.signup_btn_home.configure(cursor="arrow")
        self.signup_btn_home.configure(disabledforeground="#a3a3a3")
        self.signup_btn_home.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_home.configure(foreground="#ffffff")
        self.signup_btn_home.configure(highlightbackground="#d9d9d9")
        self.signup_btn_home.configure(highlightcolor="black")
        self.signup_btn_home.configure(pady="0")
        self.signup_btn_home.configure(relief="groove")
        self.signup_btn_home.configure(text='''Sign Up''')

        self.Label1_home = tk.Label(self.home)
        self.Label1_home.place(relx=0.017, rely=0.161, height=351, width=564)
        self.Label1_home.configure(activebackground="#f9f9f9")
        self.Label1_home.configure(activeforeground="black")
        self.Label1_home.configure(background="#d9d9d9")
        self.Label1_home.configure(disabledforeground="#a3a3a3")
        self.Label1_home.configure(foreground="#000000")
        self.Label1_home.configure(highlightbackground="#d9d9d9")
        self.Label1_home.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "img3.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1_home.configure(image=_img0)
        self.Label1_home.configure(text='''Label''')
        # ----------------------END HOME FRAME-------------------------------#

        self.show_frame(self.home)  # allows home page to load first raised

    # ----------------------VALIDATE METHOD-------------------------------#
    def validate(self):
        submitOk = True
        # getting the values put in the labels
        email = self.email_Entry1_reg.get()
        username = self.username_Entry1_reg.get()
        password = self.pass_Entry1_reg.get()
        confirm = self.confirm_Entry1_reg.get()
        email_pattern = '\\w+@{1}\\w+\\S'
        email_result = re.match(email_pattern, email)
        if not email_result:  # if email_result is false
            submitOk = False
            # title of the messagebox is error while the content/message is Invalid email
            messagebox.showerror("Error", "Invalid email")

        username_pattern = "\\w{4,}\\S"
        username_result = re.match(username_pattern, username)
        if not username_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid username")

        if submitOk is False:
            return False
        else:
            messagebox.showinfo("Success", "User Registered Successfully")
            user_id = random.randint(99999, 9999999)
            self.cursor.execute(
                "INSERT INTO commerce_users (user_id,username,email,password,reg_status) VALUES('{}','{}','{}','{}','yes')".format(
                    user_id, username, email, password))
            self.cursor.execute("SELECT * FROM commerce_users")
            result = self.cursor.fetchall()
            for row in result:
                print(row)
            self.conn.commit()
            self.conn.close()
            self.show_frame(self.login)

    # ----------------------AUTHENTICATE METHOD-------------------------------#
    def authenticate(self):
        username = self.username_Entry_login.get()
        password = self.pass_Entry_login_1.get()
        self.cursor.execute(
            "SELECT username, password FROM commerce_users WHERE username={} AND password={}".format(username, password))
        # fetching one row that comes in form of a list and storing in result
        result = self.cursor.fetchone()
        if username in result and password in result:
            messagebox.showinfo("Success", "User Logged In Successfully")
            self.show_frame(self.user)

        self.cursor.commit()
        self.conn.close()

    # ----------------------RAISE FRAME METHOD-------------------------------#
    def show_frame(self, content):
        self.content = content
        self.content.tkraise()


if __name__ == '__main__':
    vp_start_gui()
